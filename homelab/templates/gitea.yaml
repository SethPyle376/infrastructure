apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitea
  labels:
    app: gitea
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitea
  template:
    metadata:
      labels:
        app: gitea
    spec:
      volumes:
        - name: gitea
          persistentVolumeClaim:
            claimName: gitea-pvc
      containers:
        - name: gitea
          image: "{{ .Values.images.gitea.image }}:{{ .Values.images.gitea.tag }}"
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: GITEA__database__DB_TYPE
              value: postgres
            - name: GITEA__database__HOST
              value: "postgres:5432"
            - name: GITEA__database__NAME
              value: gitea
            - name: GITEA__database__USER
              value: gitea
            - name: GITEA__database__PASSWD
              value: {{.Values.postgres.pass}}
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: gitea
              mountPath: /data
          imagePullPolicy: {{ .Values.images.gitea.imagePullPolicy }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitea-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: gitea
  labels:
    app: gitea
spec:
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: gitea
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitea-ingress
  annotations:
    traefik.frontend.passHostHeader: "false"
spec:
  tls:
    - secretName: "le-cert"
    - hosts:
        - git.sethpyle.com
  rules:
    - host: git.sethpyle.com
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: gitea
                port:
                  number: 3000
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: git-backup
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: gitea
              persistentVolumeClaim:
                claimName: gitea-pvc
          containers:
            - name: git-backup
              image: "{{ .Values.images.pgBackup.image }}:{{ .Values.images.pgBackup.tag }}"
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: 'aws-storage-creds'
                      key: 'AWS_ACCESS_KEY_ID'
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: 'aws-storage-creds'
                      key: 'AWS_SECRET_ACCESS_KEY'
                - name: S3_BUCKET
                  value: {{ .Values.pgBackup.s3Bucket }}
                - name: PG_USER
                  value: {{ .Values.postgres.user }}
                - name: PG_PASS
                  value: {{ .Values.postgres.pass }}
                - name: PG_HOST
                  value: postgres
                - name: PG_PORT
                  value: "{{ .Values.postgres.port }}"
                - name: DISCORD_WEBHOOK
                  value: "https://push.sethpyle.com/postgres_backup"
              command:
                - /bin/sh
                - -c
                - tar -zcvf /tmp/git-backup-$(date +%Y%m%d-%H%M).tar.gz /data/git; aws s3 cp /tmp/*.tar.gz $S3_BUCKET;
              imagePullPolicy: {{ .Values.images.pgBackup.imagePullPolicy }}
              resources:
                requests:
                  memory: "150Mi"
                  cpu: "250m"
                limits:
                  memory: "300Mi"
                  cpu: "500m"
              volumeMounts:
                - name: gitea
                  mountPath: /data
          restartPolicy: OnFailure
      backoffLimit: 3
